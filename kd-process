#!/usr/bin/perl -w

use strict;
use diagnostics;

use Cwd;
use Getopt::Long qw(:config no_ignore_case);
use File::Basename;

use lib dirname($0);
use KD::Aux;
use KD::StateDB;

# globals
my $name = 'kd-process';
my $version = '0.7.4';

my $default_priority = 500;

my $curdir = cwd();
my $dirname = dirname($0);

# prototypes
sub prioritize(\@);

# process command line parameters
my $help;
my $getversion;
my $verbose = 0;
my $input;
my $simulate;

GetOptions(
    'help'     => \$help,
    'version'  => \$getversion,
    'Verbose'  => \$verbose,
    'input'    => \$input,
    'simulate' => \$simulate,
);

my $profile_file = $ARGV[0];

print_usage_and_exit(0) if $help;
print_version_and_exit() if $getversion;
print_usage_and_exit(1) if not $profile_file;

# read profile
my $profile = KD::Aux::read_profile($profile_file);

# try to make a connection to the state database
my $state = KD::StateDB->new({
    %{$profile},
    verbose     => $verbose ? 1 : $profile->{verbose},
});

# process files
print "\n>>> $name $version, ".KD::Aux::now_timestamp()."\n";

my $find_args = '-mindepth 1 -maxdepth 1 -type f';
my $pf_args = '';
$pf_args .= ' -V ' if $verbose;
$pf_args .= ' -i ' if $input;
$pf_args .= ' -s ' if $simulate;

my @files = `find $profile->{source} $find_args`;
chomp @files;
for my $file (prioritize(@files)) {
    print `$dirname/$name-file $pf_args \"$profile_file\" \"$file\"`;
}

# clean up database
$state->purge_old($profile->{keep_state});

#
## subroutines
#

# print_version_and_exit()
#
# Print out version information and exit with error code 0.
sub print_version_and_exit {
    print "$name $version\n";
    exit 0;
}

# print_usage_and_exit($exit_code)
#
# Print out usage information and exit with supplied exit code.
sub print_usage_and_exit {
    my $exit_code = shift;

    print<<EOT;
Aufruf: $name [Option] <Profil>

Liest <Profil> und verarbeitet alle kd-Dateien im dort angegebenen
Verzeichnis.

Optionen:
  -h, --help           diese Hilfe anzeigen
  -v, --version        Versionsinformationen anzeigen
  -q, --quiet          keine Ausgabe (nur Fehlermeldungen)
  -s, --simulate       Simuliere Aktionen, nichts veraendern
  -i, --input          Einleseskripte nach dem Einordnen fÃ¼r diese Datei
                         ausfuehren
EOT

    exit $exit_code;
}

# prioritize(\@files)
#
# Prioritizes @files according to the priority defined in $profile.
sub prioritize(\@) {
    my $files = shift;

    sub prio {
        my $file = shift;

        my $match = KD::Aux::match($profile, $file);
        # There's some serious overhead here, since match is called for
        # each comparison sort has to make.

        return defined $match->{mapping}->{priority} ?
            $match->{mapping}->{priority} : $default_priority;
    }

    # TODO: We need the files sorted by their priority and then their filename.
    # Does this expression guarantee that?
    return sort { prio($b) <=> prio($a) } sort(@$files);
}

